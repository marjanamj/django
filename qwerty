# from rest_framework.decorators import api_view
# from rest_framework.response import Response

# from .models import Books
# from .serializase import BookSerializator


# @api_view(['GET'])
# def get_books(request, pk):
#     try:
#         cat = Books.objects.get(id=pk)
#         serializer = BookSerializator(cat)
#         return Response(serializer.data, status=200)
#     except Books.DoesNotExist:
#         return Response('Not found')

# @api_view(['PUT'])
# def put_books(request, pk):
#     try:
#         cat = Books.objects.get(id=pk)
#         serializer = BookSerializator(instance=cat, data=request.data)
#         serializer.is_valid(raise_exception=True)
#         serializer.save()
#         return Response(serializer.data, status=200)
#     except Books.DoesNotExist:
#         return Response('not found')
    
# @api_view(['DELETE'])
# def delete_books(request, pk):
#     try:
#         cat = Books.objects.get(id=pk)
#         cat.delete()
#         return Response('successfully delete', status=200)
#     except Books.DoesNotExist:
#         return Response('not found')
    
# @api_view(['GET'])
# def get_books_by_id(request, pk):
#     try:
#         cat = Books.objects.get(id=pk)
#         serializer = BookSerializator(cat)
#         return Response(serializer.data, status=200)
#     except Books.DoesNotExist:
#         return Response('Not found')
    
# @api_view(['POST'])
# def post_books(request, pk):
#     try:
#         cat = Books.objects.get(id=pk)
#         serializer = BookSerializator(cat)
#         return Response(serializer.data, status=200)
#     except Books.DoesNotExist:
#         return Response('Not found')

# urls
# from django.urls import path
# from .views import *


# urlpatterns = [
#     path('books/', get_books),
#     path('books/<int:pk>/', get_books_by_id),
#     path('books-delete/<int:pk>/', delete_books)
# ]

# seri 
# from django.urls import path
# from .views import *


# urlpatterns = [
#     path('books/', get_books),
#     path('books/<int:pk>/', get_books_by_id),
#     path('books-delete/<int:pk>/', delete_books)
# ]

# modes

# •модельĸа Книги

# поля:
# title
# descriptions
# owner

# сделать полный CRUD
# такие запросы как
# GET
# GET BY ID
# POST
# # PUT
# # DELETE

# # Также сделать Админку что бы была возможность оттуда создавать редактировать удалять
# from django.db import models
# from django.contrib import admin

# class Books(models.Model):
#     title = models.CharField(max_length=255)
#     descriptions = models.CharField(max_length=256)
#     owner = models.CharField() 

#     def __str__(self):
#         return self.title
